// This file was auto-generated by ML.NET Model Builder.
using System;
using System.IO;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using Microsoft.ML;
using System.Data.SqlClient;
using Microsoft.ML.Data;
    public partial class EBA_Model
    {
        public const string RetrainConnectionString = @"Data Source=(localdb)\MSSQLLocalDB;Initial Catalog=EBA.Forecasting.DB;Integrated Security=True";
        public const string RetrainCommandString = @"SELECT CAST([PredictionID] as REAL), CAST([HospitalID] as REAL), [PredictionDate], CAST([PredictedAvailableBeds] as REAL), CAST([PredictedOccupiedBeds] as REAL), CAST([BedID] as REAL), CAST([BedNumber] as REAL), CAST([BedType] as NVARCHAR(MAX)), CAST([BedStatus] as NVARCHAR(MAX)), CAST([HospitalName] as NVARCHAR(MAX)), CAST([HospitalLocation] as NVARCHAR(MAX)), CAST([PatientID] as REAL), CAST([Age] as REAL), CAST([Gender] as NVARCHAR(MAX)), [AdmissionDate], CAST([AdmissionStatus] as NVARCHAR(MAX)), [DischargeDate], CAST([CaseID] as REAL), CAST([EmergencyType] as NVARCHAR(MAX)), [EmergencyAdmissionTime] FROM [dbo].[EnhancedPredictionData]";

        /// <summary>
        /// Train a new model with the provided dataset.
        /// </summary>
        /// <param name="outputModelPath">File path for saving the model. Should be similar to "C:\YourPath\ModelName.mlnet"</param>
        /// <param name="connectionString">Connection string for databases on-premises or in the cloud.</param>
        /// <param name="commandText">Command string for selecting training data.</param>
        public static void Train(string outputModelPath, string connectionString = RetrainConnectionString, string commandText = RetrainCommandString)
        {
            var mlContext = new MLContext();

            var data = LoadIDataViewFromDatabase(mlContext, connectionString, commandText);
            var model = RetrainModel(mlContext, data);
            SaveModel(mlContext, model, data, outputModelPath);
        }

        /// <summary>
        /// Load an IDataView from a database source.For more information on how to load data, see aka.ms/loaddata.
        /// </summary>
        /// <param name="mlContext">The common context for all ML.NET operations.</param>
        /// <param name="connectionString">Connection string for databases on-premises or in the cloud.</param>
        /// <param name="commandText">Command string for selecting training data.</param>
        /// <returns>IDataView with loaded training data.</returns>
        public static IDataView LoadIDataViewFromDatabase(MLContext mlContext, string connectionString, string commandText)
        {
            DatabaseLoader loader = mlContext.Data.CreateDatabaseLoader<ModelInput>();
            DatabaseSource dbSource = new DatabaseSource(SqlClientFactory.Instance, connectionString, commandText);

            return loader.Load(dbSource);
        }

        /// <summary>
        /// Save a model at the specified path.
        /// </summary>
        /// <param name="mlContext">The common context for all ML.NET operations.</param>
        /// <param name="model">Model to save.</param>
        /// <param name="data">IDataView used to train the model.</param>
        /// <param name="modelSavePath">File path for saving the model. Should be similar to "C:\YourPath\ModelName.mlnet.</param>
        public static void SaveModel(MLContext mlContext, ITransformer model, IDataView data, string modelSavePath)
        {
            // Pull the data schema from the IDataView used for training the model
            DataViewSchema dataViewSchema = data.Schema;

            using (var fs = File.Create(modelSavePath))
            {
                mlContext.Model.Save(model, dataViewSchema, fs);
            }
        }


        /// <summary>
        /// Retrain model using the pipeline generated as part of the training process.
        /// </summary>
        /// <param name="mlContext"></param>
        /// <param name="trainData"></param>
        /// <returns></returns>
        public static ITransformer RetrainModel(MLContext mlContext, IDataView trainData)
        {
            var pipeline = BuildPipeline(mlContext);
            var model = pipeline.Fit(trainData);

            return model;
        }

        /// <summary>
        /// build the pipeline that is used from model builder. Use this function to retrain model.
        /// </summary>
        /// <param name="mlContext"></param>
        /// <returns></returns>
        public static IEstimator<ITransformer> BuildPipeline(MLContext mlContext)
        {
            // Data process configuration with pipeline data transformations
            var pipeline = mlContext.Forecasting.ForecastBySsa(windowSize:2,seriesLength:10,trainSize:40,horizon:10,outputColumnName:@"PredictedAvailableBeds",inputColumnName:@"PredictedAvailableBeds",confidenceLowerBoundColumn:@"PredictedAvailableBeds_LB",confidenceUpperBoundColumn:@"PredictedAvailableBeds_UB");

            return pipeline;
        }
    }
 